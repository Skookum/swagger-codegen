// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    class Decoders {
        static fileprivate var decoders = Dictionary<String, ((AnyObject) throws -> Any)>()
        
        static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) throws -> T)) {
            let key = "\(T.self)"
            decoders[key] = { try decoder($0) as AnyObject }
        }
        
        static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) throws -> T {
            let key = discriminator;
            if let decoder = decoders[key] {
                return try decoder(source) as! T
            } else {
                throw ModelErrors.parsingError
            }
        }
        
        static func decode<T>(clazz: [T].Type, source: AnyObject) throws -> [T] {
            let array = source as! [AnyObject]
            return try array.map {
                try Decoders.decode(clazz: T.self, source: $0)
            }
        }
        
        static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) throws -> [Key:T] {
            let sourceDictionary = source as! [Key: AnyObject]
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                try dictionary[key] = Decoders.decode(clazz: T.self, source: value)
            }
            return dictionary
        }
        
        static func decode<T>(clazz: T.Type, source: AnyObject) throws -> T {
            initialize()
            if let number = source as? NSNumber {
                if T.self is Int32.Type {
                    return number.int32Value as! T;
                }
                if T.self is Int64.Type {
                    return number.int64Value as! T;
                }
            }
            if source is T {
                return source as! T
            }
            if T.self is Data.Type && source is String {
                return Data(base64Encoded: source as! String) as! T
            }
            
            let key = "\(T.self)"
            if let decoder = decoders[key] {
                return try decoder(source) as! T
            } else {
                throw ModelErrors.parsingError
            }
        }
        
        static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) throws -> T? {
            if source is NSNull {
                return nil
            }
            return try source.map { (source: AnyObject) -> T in
                try Decoders.decode(clazz: clazz, source: source)
            }
        }
        
        static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) throws -> [T]? {
            if source is NSNull {
                return nil
            }
            return try source.map { (someSource: AnyObject) -> [T] in
                try Decoders.decode(clazz: clazz, source: someSource)
            }
        }
        
        static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) throws -> [Key:T]? {
            if source is NSNull {
                return nil
            }
            return try source.map { (someSource: AnyObject) -> [Key:T] in
                try Decoders.decode(clazz: clazz, source: someSource)
            }
        }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                throw ModelErrors.parsingError
            } {{#models}}{{#model}}

            // Decoder for [{{{classname}}}]
            Decoders.addDecoder(clazz: [{{{classname}}}].self) { (source: AnyObject) -> [{{{classname}}}] in
                return try Decoders.decode(clazz: [{{{classname}}}].self, source: source)
            }
            // Decoder for {{{classname}}}
            Decoders.addDecoder(clazz: {{{classname}}}.self) { (source: AnyObject) -> {{{classname}}} in
                let sourceDictionary = source as! [NSObject:AnyObject]
                {{#unwrapRequired}}
                let instance = {{classname}}({{#requiredVars}}{{^-first}}, {{/-first}}{{#isEnum}}{{name}}: {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "")! {{/isEnum}}{{^isEnum}}{{name}}: Decoders.decode(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"]!){{/isEnum}}{{/requiredVars}})
                {{#optionalVars}}
                {{#isEnum}}
                instance.{{name}} = {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "")
                {{/isEnum}}
                {{^isEnum}}
                instance.{{name}} = Decoders.decodeOptional(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"])
                {{/isEnum}}
                {{/optionalVars}}
                {{/unwrapRequired}}
                {{^unwrapRequired}}
                let instance = {{classname}}(){{#vars}}{{#isEnum}}
                instance.{{name}} = {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "") {{/isEnum}}{{^isEnum}}
                instance.{{name}} = Decoders.decodeOptional(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"]){{/isEnum}}{{/vars}}
                {{/unwrapRequired}}
                return instance
            }{{/model}}
			{{/models}}
        }
    }
}
